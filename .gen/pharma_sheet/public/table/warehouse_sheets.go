//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var WarehouseSheets = newWarehouseSheetsTable("public", "warehouse_sheets", "")

type warehouseSheetsTable struct {
	postgres.Table

	// Columns
	WarehouseID    postgres.ColumnString
	SpreadsheetID  postgres.ColumnString
	SheetID        postgres.ColumnInteger
	LatestSyncedAt postgres.ColumnTimestampz
	CreatedAt      postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type WarehouseSheetsTable struct {
	warehouseSheetsTable

	EXCLUDED warehouseSheetsTable
}

// AS creates new WarehouseSheetsTable with assigned alias
func (a WarehouseSheetsTable) AS(alias string) *WarehouseSheetsTable {
	return newWarehouseSheetsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new WarehouseSheetsTable with assigned schema name
func (a WarehouseSheetsTable) FromSchema(schemaName string) *WarehouseSheetsTable {
	return newWarehouseSheetsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new WarehouseSheetsTable with assigned table prefix
func (a WarehouseSheetsTable) WithPrefix(prefix string) *WarehouseSheetsTable {
	return newWarehouseSheetsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new WarehouseSheetsTable with assigned table suffix
func (a WarehouseSheetsTable) WithSuffix(suffix string) *WarehouseSheetsTable {
	return newWarehouseSheetsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newWarehouseSheetsTable(schemaName, tableName, alias string) *WarehouseSheetsTable {
	return &WarehouseSheetsTable{
		warehouseSheetsTable: newWarehouseSheetsTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newWarehouseSheetsTableImpl("", "excluded", ""),
	}
}

func newWarehouseSheetsTableImpl(schemaName, tableName, alias string) warehouseSheetsTable {
	var (
		WarehouseIDColumn    = postgres.StringColumn("warehouse_id")
		SpreadsheetIDColumn  = postgres.StringColumn("spreadsheet_id")
		SheetIDColumn        = postgres.IntegerColumn("sheet_id")
		LatestSyncedAtColumn = postgres.TimestampzColumn("latest_synced_at")
		CreatedAtColumn      = postgres.TimestampzColumn("created_at")
		allColumns           = postgres.ColumnList{WarehouseIDColumn, SpreadsheetIDColumn, SheetIDColumn, LatestSyncedAtColumn, CreatedAtColumn}
		mutableColumns       = postgres.ColumnList{WarehouseIDColumn, SpreadsheetIDColumn, SheetIDColumn, LatestSyncedAtColumn, CreatedAtColumn}
	)

	return warehouseSheetsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		WarehouseID:    WarehouseIDColumn,
		SpreadsheetID:  SpreadsheetIDColumn,
		SheetID:        SheetIDColumn,
		LatestSyncedAt: LatestSyncedAtColumn,
		CreatedAt:      CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
