//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var WarehouseUsers = newWarehouseUsersTable("public", "warehouse_users", "")

type warehouseUsersTable struct {
	postgres.Table

	// Columns
	WarehouseID postgres.ColumnString
	UserID      postgres.ColumnString
	Role        postgres.ColumnString
	CreatedAt   postgres.ColumnTimestampz
	UpdatedAt   postgres.ColumnTimestampz
	Status      postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type WarehouseUsersTable struct {
	warehouseUsersTable

	EXCLUDED warehouseUsersTable
}

// AS creates new WarehouseUsersTable with assigned alias
func (a WarehouseUsersTable) AS(alias string) *WarehouseUsersTable {
	return newWarehouseUsersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new WarehouseUsersTable with assigned schema name
func (a WarehouseUsersTable) FromSchema(schemaName string) *WarehouseUsersTable {
	return newWarehouseUsersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new WarehouseUsersTable with assigned table prefix
func (a WarehouseUsersTable) WithPrefix(prefix string) *WarehouseUsersTable {
	return newWarehouseUsersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new WarehouseUsersTable with assigned table suffix
func (a WarehouseUsersTable) WithSuffix(suffix string) *WarehouseUsersTable {
	return newWarehouseUsersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newWarehouseUsersTable(schemaName, tableName, alias string) *WarehouseUsersTable {
	return &WarehouseUsersTable{
		warehouseUsersTable: newWarehouseUsersTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newWarehouseUsersTableImpl("", "excluded", ""),
	}
}

func newWarehouseUsersTableImpl(schemaName, tableName, alias string) warehouseUsersTable {
	var (
		WarehouseIDColumn = postgres.StringColumn("warehouse_id")
		UserIDColumn      = postgres.StringColumn("user_id")
		RoleColumn        = postgres.StringColumn("role")
		CreatedAtColumn   = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn   = postgres.TimestampzColumn("updated_at")
		StatusColumn      = postgres.StringColumn("status")
		allColumns        = postgres.ColumnList{WarehouseIDColumn, UserIDColumn, RoleColumn, CreatedAtColumn, UpdatedAtColumn, StatusColumn}
		mutableColumns    = postgres.ColumnList{WarehouseIDColumn, UserIDColumn, RoleColumn, CreatedAtColumn, UpdatedAtColumn, StatusColumn}
	)

	return warehouseUsersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		WarehouseID: WarehouseIDColumn,
		UserID:      UserIDColumn,
		Role:        RoleColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,
		Status:      StatusColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
